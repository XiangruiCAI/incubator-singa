name: "mscnnlm"

train_steps:3745
disp_freq:100
test_steps:417
test_freq:700

train_one_batch {
alg: kBP
}

updater{
  type: kSGD
#learning_rate{
#    type : kExponential
#    base_lr: 0.0001
#    exponential_conf {
#      change_freq: 100
#    }
#  }
  learning_rate{
    type : kLinear
    base_lr: 0.01
    linear_conf {
      change_freq: 200
      final_lr: 0.00001
    }
  }
  clip_high: 10
  clip_low: -10
}

neuralnet {
layer {
  name: "data"
  user_type: "kData"
  [data_conf] {
    backend: "kvfile"
    path: "examples/cnnlm/train_data.bin"
    max_word_len: 30
    max_num_word: 100
    vacab_size: 7014
    batchsize: 1
  }
  include: kTrain
}

layer {
  name: "data"
  user_type: "kData"
  [data_conf] {
    backend: "kvfile"
    path: "examples/cnnlm/test_data.bin"
    max_word_len: 30
    max_num_word: 100
    vacab_size: 7014
    batchsize: 1
  }
  include: kTest
}

layer {
  name: "conv_ch"
  type: kCConvolution
  srclayers: "embedding"
  convolution_conf {
    num_filters: 512
    kernel_x: 7014
    kernel_y: 1
  }
  param {
    name: "w2"
    init {
      type: kGaussian
      std: 1
    }
  }
  param {
    name: "b2"
    lr_scale: 2.0
    init {
      type: kConstant
      value: 0
    }
  }
}

layer {
  name: "pool1"
  type: kCPooling
  srclayers: "conv_ch"
  pooling_conf {
    pool: MAX
    kernel_x: 1
    kernel_y: 30
    stride_x: 1
    stride_y: 30
  }
}

layer {
  name: "conv_wd"
  type: kCConvolution
  srclayers: "pool1"
  convolution_conf {
    num_filters: 256
    kernel_x: 1
    kernel_y: 2
  }
  param {
    name: "w3"
    init {
      type: kGaussian
      std: 1
    }
  }
  param {
    name: "b3"
    lr_scale: 2.0
    init {
      type: kConstant
      value: 0
    }
  }
}

layer {
  name: "pool2"
  type: kCPooling
  srclayers: "conv_wd"
  pooling_conf {
    pool: MAX
    kernel_x: 1
    kernel_y: 100
  }
}

layer {
  name: "innerproduct"
  type: kInnerProduct
  srclayers: "pool2"
  innerproduct_conf {
    num_output: 2
  }
  param {
    name: "w4"
    init {
      type: kUniform
      low: -0.5
      high: 0.5
    }
  }
  param {
    name: "b4"
    init {
      type: kUniform
      low: -0.5
      high: 0.5
    }
  }
}

layer {
  name: "softmax"
  type: kSoftmaxLoss
  srclayers: "innerproduct"
  srclayers: "data"
  softmaxloss_conf {
    topk:1
  }
}

}

cluster {
  nworker_groups: 1
  nserver_groups: 1
  nservers_per_group: 1
  nworkers_per_group: 1
  nservers_per_procs: 1
  nworkers_per_procs: 1
  workspace: "examples/cnnlm/"
}
